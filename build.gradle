plugins {
	id 'org.springframework.boot' version '3.4.2'
	id 'com.palantir.git-version' version '3.1.0'
}

version gitVersion()

apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'checkstyle'

group 'com.bannergress'

java {
  sourceCompatibility = JavaVersion.VERSION_17
}

repositories {
  maven {
    url 'https://repo.osgeo.org/repository/geotools-releases/'
  }
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.hibernate.orm:hibernate-envers'
  implementation 'org.hibernate.orm:hibernate-spatial'
  implementation platform('org.hibernate.search:hibernate-search-bom:7.2.2.Final')
  implementation 'org.hibernate.search:hibernate-search-mapper-orm'
  implementation 'org.hibernate.search:hibernate-search-backend-lucene'
  implementation 'org.flywaydb:flyway-core'
	implementation 'com.google.guava:guava:33.4.0-jre'
	implementation "com.google.maps:google-maps-services:${google_maps_services_version}"
  implementation "com.squareup.okhttp3:okhttp:${okhttp_version}"
  implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
  implementation "org.keycloak:keycloak-admin-client:${keycloak_version}"
  implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.4'
  implementation 'org.geotools:gt-referencing:32.2'

  annotationProcessor 'org.hibernate.orm:hibernate-jpamodelgen'
  annotationProcessor "net.karneim:pojobuilder:$pojobuilder_version"

  compileOnly "net.karneim:pojobuilder:$pojobuilder_version:annotations"

	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'org.flywaydb:flyway-database-postgresql'
	runtimeOnly 'org.apache.lucene:lucene-backward-codecs:9.9.2'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

checkstyle {
	configFile file('config/checkstyle/simple-checkstyle.xml')
	sourceSets = [project.sourceSets.main, project.sourceSets.test]
	maxErrors = 0
	maxWarnings = 0
}

test {
	environment SPRING_PROFILES_ACTIVE: environment.SPRING_PROFILES_ACTIVE ?: 'dev'
	useJUnitPlatform()
}

bootRun {
	environment SPRING_PROFILES_ACTIVE: environment.SPRING_PROFILES_ACTIVE ?: 'dev'
	if (project.hasProperty('jvmArgs')) {
		jvmArgs = (project.jvmArgs.split('\\s+') as List)
	}
}

